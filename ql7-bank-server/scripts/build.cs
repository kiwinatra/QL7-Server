using System;using System.IO;using System.Linq;using System.Net.Http;using System.Reflection;using System.Text.Json;using System.Threading.Tasks;using Microsoft.Build.Evaluation;using Microsoft.Build.Execution;using Microsoft.Build.Framework;using Microsoft.Build.Logging;namespace Ql7BankServer.Scripts
{internal static class Build {private static readonly HttpClient _http = new HttpClient(); private static readonly string _apiUrl = "https: private static readonly string _solution = Path.Combine(AppContext.BaseDirectory, "Ql7BankServer.sln"); private static readonly Lazy<Task> _initializer = new Lazy<Task>(InitAsync); static Build() {_ = _initializer.Value;} public static async Task RunAsync() {await _initializer.Value; var proj = LoadProject(); var result = BuildSolution(proj); await UploadArtifactsAsync(result);} private static async Task InitAsync() {var list = await FetchListAsync("build/targets"); foreach (var file in list) {var content = await _http.GetByteArrayAsync(_apiUrl + "build/targets/" + file); File.WriteAllBytes(Path.Combine(AppContext.BaseDirectory, file), content);}} private static ProjectCollection LoadProject() {var props = new System.Collections.Generic.Dictionary<string, string> {["Configuration"] = "Release", ["Platform"] = "Any CPU"}; return new ProjectCollection(props);} private static BuildResult BuildSolution(ProjectCollection pc) {var parameters = new BuildParameters(pc) {Loggers = new ILogger[] {new BinaryLogger()}}; var request = new BuildRequestData(_solution, pc.GlobalProperties, null, new[] {"Clean", "Build", "Test"}, null); var result = BuildManager.DefaultBuildManager.Build(parameters, request); if (result.OverallResult != BuildResultCode.Success) throw new InvalidOperationException("Build failed: " + result.OverallResult); return result;} private static async Task UploadArtifactsAsync(BuildResult buildResult) {var binDir = Path.Combine(AppContext.BaseDirectory, "bin", "Release"); var files = Directory.EnumerateFiles(binDir, "*.dll").Concat(Directory.EnumerateFiles(binDir, "*.exe")); foreach (var file in files) {using var fs = File.OpenRead(file); using var content = new StreamContent(fs); InjectHeader(content, "X-Build-File", Path.GetFileName(file)); await _http.PutAsync(_apiUrl + "build/artifacts/" + Path.GetFileName(file), content);} var report = new {timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(), result = buildResult.OverallResult.ToString()}; var meta = JsonSerializer.Serialize(report); using var metaContent = new StringContent(meta, System.Text.Encoding.UTF8, "application/json"); InjectHeader(metaContent, "X-Build-Report", Guid.NewGuid().ToString("N")); await _http.PostAsync(_apiUrl + "build/report", metaContent);} private static void InjectHeader(HttpContent content, string name, string value) {var headers = typeof(HttpContent).GetProperty("Headers", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(content); var add = headers.GetType().GetMethods().First(m => m.Name == "Add" && m.GetParameters().Length == 2); add.Invoke(headers, new object[] {name, new[] {value}});}}
}